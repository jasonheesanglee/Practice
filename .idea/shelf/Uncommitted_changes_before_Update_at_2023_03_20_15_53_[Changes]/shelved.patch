Index: AI BASICS 2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>a = [1,2,3,4,5]\nprint(a)\na.append(10)\nprint(a)\na.append(20)\nprint(a)\n\nc = a.pop()\nprint(a)\nprint(c)\nprint()\n\nword = input(\"Input a word Stack: \")\nword_list = list(word)\n# print(word_list)\nfor _ in range(len(word_list)):\n    print(word_list.pop())\n    print(word_list)\n\nprint()\na = [1,2,3,4,5]\nprint(a)\na.append(10)\nprint(a)\na.append(20)\nprint(a)\n\nc = a.pop(0)\nprint(a)\nprint(c)\n\nword = input(\"Input a word Queue: \")\nword_list = list(word)\n# print(word_list)\nfor _ in range(len(word_list)):\n    print(word_list.pop(0))\n    print(word_list)\n\nprint()\n\nt = (1,2,3)\nprint(type(t))\nprint(t + t)\nprint(t * 2)\nprint(t)\nprint(len(t))\n#  t[1] = 5\n#  print(t)\n\nt = (1)\nprint(type(t))\n\nt = (1,)\nprint(type(t))\n\n\nprint()\ns = set([1,2,3,1,2,3])\nprint(s)\n\ns.add(1)\nprint(s)\n\ns.remove(1)\nprint(s)\n\ns.update([1,4,5,6,7])\nprint(s)\n\ns.discard(3)\nprint(s)\ns.clear()\nprint(s)\n\nprint()\n\ns1 = set([1,2,3,4,5])\ns2 = set([3,4,5,6,7])\n\nprint(s1.union(s2))\n\nprint(s1 | s2)\n\nprint(s1.intersection(s2))\nprint(s1 & s2)\nprint(s1.difference(s2))\nprint(s1 - s2)\n\nprint()\ncountry_code = {}\ncountry_code = {\"America\": 1, \"Korea\": 82, \"China\": 86, \"Japan\": 81}\nprint(country_code)\nprint(country_code.items())\nprint(country_code.keys())\ncountry_code[\"German\"] = 49\nprint(country_code)\nprint(country_code.values())\n\n\nfor k, v in country_code.items():\n    print(\"Key :\", k)\n    print(\"Value :\", v)\n\nprint(\"Korea\" in country_code.keys())\nprint(82 in country_code.values())\n\nprint()\n\nimport csv\ndef getKey(item):\n    return item[1]\ncommand_data = []\nwith open('command_data.csv', 'r', encoding='utf8') as csvfile:\n    spamreader = csv.reader(csvfile, delimiter=',', quotechar='\"')\n    for row in spamreader:\n        command_data.append(row)\n\ncommand_counter = {}\nfor data in command_data:\n    if data[1] in command_counter.keys():\n        command_counter[data[1]] += 1\n    else:\n        command_counter[data[1]] = 1\n\nprint(command_counter)\n\ndictlist = []\nfor key, value in command_counter.items():\n    temp = [key,value]\n    dictlist.append(temp)\n\nsorted_dict = sorted(dictlist, key=getKey, reverse=True)\nprint(sorted_dict)\n\nprint()\n\nfrom collections import deque\n\ndeque_list = deque()\nfor i in range (5):\n\tdeque_list.append(i)\nprint(deque_list)\ndeque_list.appendleft(10)\nprint(deque_list)\n\nprint()\n\ndeque_list = deque()\nfor i in range(5):\n    deque_list.append(i)\ndeque_list.appendleft(10)\nprint(deque_list)\nprint()\n\ndeque_list.rotate(2)\nprint(deque_list)\ndeque_list.rotate(1)\nprint(deque_list)\ndeque_list.append(100)\nprint(deque_list)\ndeque_list.appendleft(200)\nprint(deque_list)\ndeque_list.extend([5, 6, 7])\ndeque_list.extendleft([5, 6, 7])\n\nprint()\n#  def general_list():\n#      just_list = []\n#      for i in range(100):\n#          just_list.append(i)\n#          just_list.pop()\n#  %timeit general_list()\n\nprint()\n#  def deque_list():\n#      deque_list = deque()\n\n#      for i in range(100):\n#          for i in range(100):\n#              deque_list.append(i)\n#              deque_list.pop()\n\n#  %timeit deque_list()\n\n\nf = open(\"yesterday.txt\", \"r\")\nyesterday = \"\"\nwhile True:\n    line = f.readline()\n    if not line:\n        break\n    yesterday = yesterday + line.strip() + \"\\n\"\nf.close()\nprint(yesterday)\n\nfrom collections import defaultdict\nfrom collections import OrderedDict\n\n\nd = defaultdict(lambda : 0)\nprint(d)\nfor word in yesterday.split():\n    d[word] += 1\nprint(d)\n\ndef get_key(x):\n    return x[1]\n\nsorted_dict = OrderedDict()\nfor i, v in sorted(d.items(), key=getKey, reverse=True):\n    sorted_dict[i] = v\nprint(sorted_dict)\nsorted_dict[\"to\"]\n\nprint()\n\nfrom collections import Counter\n\nball_or_strike_list = Counter([\"B\", \"S\", \"S\", \"S\", \"S\", \"B\", \"B\"])\nc = Counter(ball_or_strike_list)\nprint(c)\nprint(list(c.elements()))\n\nprint()\n\nc = Counter(a=4, b=2, c=0, d=-2)\nd = Counter(a=1, b=2, c=3, d=4)\nc.subtract(d)\nprint(c)\nprint(c + d)\nprint(c & d)\nprint(c | d)\nprint()\n\nsorted(Counter(yesterday).items(), key=lambda t: t[1], reverse=True)\nprint(Counter(yesterday)[\"a\"])\n\nfrom collections import namedtuple\n\nPoint = namedtuple(\"Point\", [\"x\", \"y\"])\np = Point(11, y=22)\nprint(p[0] + p[1])\n\nx, y = p\nprint(x, y)\nprint(p.x + p.y)\nprint(Point(x=11, y=22))\n\n# f = open(\"users.csv\", \"r\")\n# next(f)\n# reader = csv.reader(f)\n# student_list = []\n# for row in reader :\n#     student_list.append(row)\n#     print(row)\n#\n# columns = [\"user_id\", \"integration_id\", \"login_id\", \"password\", \"first_name\", \"last_name\", \"full_name\", \"sortable_name\", \"short_name\", \"email\", \"status\"]\n#\n# Student = namedtuple(\"Student\", \" \".join(columns))\n# student_nametuple_list = []\n# for row in student_list:\n#     student = Student(*row)\n#     student_nametuple_list.append(student)\n# print(student_nametuple_list)\n# print(student_nametuple_list[0].full_name)\n\nprint()\n\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\nresult = \"\"\nfor s in colors:\n    result += s\nprint(result)\n\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\nresult = \"\".join(colors)\nprint(result)\n\nprint()\n\nitems = \"zero one two three\".split()\nprint(items)\n\nexample = \"python, java, javascript\"\nfor content in example.split(\",\"):\n    print(content.strip())\n\na, b, c = example.split(\",\")\nprint(a, b, c)\n\nexample = \"teamlab.technology.io\"\nsubdomain, domain, tld = example.split(\".\")\nprint(subdomain, domain, tld)\n\nprint()\n\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\nresult = \"-\".join(colors)\nprint(result)\n\nprint(\"        \".join(colors))\n\nprint()\n\nresult = []\nfor i in range(10):\n    result.append(i)\n\nprint(result)\n\nresult = [i for i in range(10)]\nprint(result)\nresult = [i for i in range(10) if i % 2 ==0]\nprint(result)\n\nword_1 = \"Hello\"\nword_2 = \"World\"\nresult = [i+j for i in word_1 for j in word_2]\nprint(result)\n\nprint()\n\ncase_1 = [\"A\", \"B\", \"C\"]\ncase_2 = [\"D\", \"E\", \"A\"]\nresult = [i+j for i in case_1 for j in case_2]\nprint(result)\nresult = [i+j for i in case_1 for j in case_2 if not(i==j)]\nprint(result)\nresult.sort()\nprint(result)\n\nresult = [i+j if not(i==j) else \"BEE\" for i in case_1 for j in case_2]\nprint(result)\n\nprint()\n\nwords = \"The quick brown fox jumps over the lazy dog\".split()\nprint(words)\n\nstuff = [[w.upper(), w.lower(), len(w)] for w in words]\nprint(stuff)\n\nimport pprint as pp\npp.pprint(stuff)\n\nprint()\n\ncase_1 = [\"A\", \"B\", \"C\"]\ncase_2 = [\"D\", \"E\", \"A\"]\nresult = [i+j for i in case_1 for j in case_2]\nprint(result)\nresult = [[i+j for i in case_1]for j in case_2]\nprint(result)\nresult = [[j + i for i in case_1 if j !=\"D\"] for j in case_2]\nprint(result)\n\nprint()\n\nfor i, v in enumerate([\"tic\", \"tac\", \"toe\"]):\n    print(i,v)\n\nprint()\n\nfor i, v in enumerate(\"ABC\"):\n    print(\"{0} \\t {1}\".format(i, v))\n\n\nprint()\n\nmy_str = \"ABCD\"\nprint({v : i for i, v in enumerate(my_str)})\n\n\ntext = \"Samsung Group is a South Korean multinational conglomerate headquartered in Samsung town, Seoul\"\nset_text = list(set(text.split()))\nprint({i : v.lower() for i, v in enumerate(text.split())})\n\nprint({i:v.lower() for i, v in enumerate(set_text)})\n\nprint({v.lower():i for i, v in enumerate(set_text)})\n\nprint()\n\nalist = [\"a1\", \"a2\", \"a3\"]\nblist = [\"b1\", \"b2\", \"b3\"]\nprint([[a,b] for a, b in zip(alist, blist)])\n\nprint([c for c in zip(alist, blist)])\n\nprint()\n\nmath = (100, 90, 80)\nkor = (90, 90, 70)\neng = (90, 80, 70)\n\naverage_score = [sum(value) / 3 for value in zip(math, kor, eng)]\nprint(average_score)\nfor i in average_score:\n    i = float(f\"{i:.2f}\")\n    print(i)\n\nprint()\n\nalist = [\"a1\", \"a2\", \"a3\"]\nblist = [\"b1\", \"b2\", \"b3\"]\nfor i, values in enumerate(zip(alist, blist)):\n    print(i, values)\nprint()\nprint(zip(alist, blist))\nprint(list(zip(alist, blist)))\nprint(enumerate(list(zip(alist, blist))))\nprint(list(enumerate(list(zip(alist, blist)))))\n\nprint()\n\ndef f(x, y):\n    return x + y\nprint(f(1, 4))\n\nf = lambda x, y: x + y\nprint(f(1, 4))\n\nprint()\nf = (lambda x, y: x + y)\nprint(f(10, 50))\n\nprint((lambda x, y: x + y)(10, 50))\nprint()\n\nup_low = lambda x : x.upper() + x.lower()\nprint(up_low(\"My Happy\"))\nprint((lambda x : x.upper() + x.lower())(\"My Happy\"))\n\nprint()\nup_low = lambda x : \"-\".join(x.split())\nprint(up_low(\"My Happy\"))\nprint((lambda x : \"-\".join(x.split()))(\"My Happy\"))\n\nprint()\nup_low = lambda x : \"-\".join(x.split())\nprint(up_low(\"My Happy\"))\nprint((lambda x : \"-\".join(x.split()))(\"My Happy\"))\n\nprint()\n\nex = [1, 2, 3, 4, 5]\nf = lambda x, y: x + y\nprint(list(map(f, ex, ex)))\n\n\nf = lambda x: x ** 2\nprint(list(map(f, ex)))\nprint([f(value) for value in ex])\n\ndef f(x):\n    return x + 5\nprint(list(map(f, ex)))\n\nprint([f(value) for value in ex])\n\nprint()\n\nprint(list(map(lambda x : x ** 2 if x % 2 == 0 else x, ex)))\n\nprint([value**2 if value % 2 == 0 else value for value in ex])\n\nprint()\n\nfrom functools import reduce\nprint(reduce(lambda x, y : x+y, [1, 2, 3, 4, 5]))\n\nprint()\n\nfor city in [\"Seoul\", \"Busan\", \"Pohoang\"]:\n    print(city, end=\"\\t\")\n\nfor language in (\"Python\", \"C\", \"Java\"):\n    print(language, end=\"\\t\")\nfor char in \"Python is easy\":\n    print(char, end=\" \")\n\nprint()\n\ncities = [\"Seoul\", \"Busan\", \"Pohoang\"]\niter_obj = iter(cities)\n\nprint(next(iter_obj))\nprint(next(iter_obj))\nprint(next(iter_obj))\n# print(next(iter_obj))\n\n\nprint()\n\ndef general_list(value):\n    result = []\n    for i in range(value):\n        result.append(i)\n    return result\nprint(general_list(50))\n\nimport sys\nresult = general_list(50)\nprint(sys.getsizeof(result))\n\ndef generator_list(value):\n    result = []\n    for i in range(value):\n        yield i\n\nfor a in generator_list(50):\n    print(a)\n\nresult = generator_list(50)\nprint(sys.getsizeof(result))\n\ngen_ex = (n*n for n in range(500))\nprint(type(gen_ex))\nprint(list(gen_ex))\n\nprint()\nfrom sys import getsizeof\n\ngen_ex = (n*n for n in range(500))\nprint(getsizeof(gen_ex))\nprint(getsizeof(list(gen_ex)))\n\n\ngen_ex = (n*n for n in range(5000))\nprint(getsizeof(gen_ex))\nprint(getsizeof(list(gen_ex)))\n\nlist_ex = [n*n for n in range(500)]\nprint(getsizeof(list_ex))\n\n\nlist_ex = [n*n for n in range(5000)]\nprint(getsizeof(list_ex))\n\n\nprint()\n\ndef print_something(my_name, your_name, third_name):\n    print(\"Hello {0}, My name is {1}\".format(your_name, my_name))\n\nprint_something(third_name=\"abc\", my_name=\"Jason\", your_name=\"TeamLab\")\nprint_something(\"abc\", \"Jason\", \"TeamLab\")\n\n\nprint()\n\ndef print_something_2(my_name, your_name = \"TeamLab\"):\n    print(\"Hello {0}, My name is {1}\".format(your_name, my_name))\n\nprint_something_2(\"Jason\")\nprint_something_2(\"Jason\", \"Naver\")\n\nprint()\n\ndef asterisk_test(a, b, *args):\n    print(list(args))\n    print(type(args))\n    return a+b+sum(args)\n\nprint(asterisk_test(1,2,3,4,5))\n\nprint()\n\ndef kwargs_test_1(**kwargs):\n    print(kwargs)\n    print(type(kwargs))\n\nkwargs_test_1(first=3, second=4, third=5)\n\nprint()\ndef kwargs_test_3(one, two=3, *args,**kwargs):\n    print(one + two + sum(args))\n    print(args)\n    print(kwargs)\n\nkwargs_test_3(10, 30, 3, 5, 6, 7, 8, first=3, second=4, third=5)\n\nprint()\n\ndef asterisk_test(a, *args):\n    print(a, args)\n    print(*args)\n    print(args)\n    print(type(args))\nasterisk_test(1, *(2,3,4,5,6))\n\nprint()\n\ndef asterisk_test(a, args):\n    print(a, *args)\n    print(*args)\n    print(args)\n    print(type(args))\nasterisk_test(1, (2,3,4,5,6))\n\nprint()\n\na, b, c = ([1, 2], [3, 4], [5,6])\nprint(a, b, c)\n\ndata = ([1, 2], [3, 4], [5,6])\nprint(*data)\n\ndef asterisk_test(a, b, c, d):\n    print(a, b, c, d)\ndata = {\"b\":1, \"c\":2, \"d\":3}\nasterisk_test(10, **data)\n\nprint()\n\nex = ([1, 2], [3, 4], [5, 6], [5, 6], [5, 6])\nprint(ex)\nprint(*ex)\nprint()\nfor value in zip(ex):\n    print(value)\n\nfor value in zip(*ex):\n    print(value)\n    print(sum(value))\n\nprint()\n\nclass SoccerPlayer(object):\n    def __init__(self, name : str, position : str, back_number : int):\n        self.name = name\n        self.position = position\n        self.back_number = back_number\n\n    def __str__(self):\n        return \"Hello, My name is %s. I play in %s in the center\"% (self.name, self.position)\n\n    # def __add__(self.other):\n    #     return self.name, other.name\n    def change_back_number(self, new_number):\n        print(\"Changing the player's back number: From %d to %d\" %(self.back_number, new_number))\n        self.back_number = new_number\n\n\nabc = SoccerPlayer(\"Son\", \"FW\", 7)\nPark = SoccerPlayer(\"Park\", \"WF\", 13)\nChoi = SoccerPlayer(\"Choi\", \"MF\", 10)\nprint()\n\nprint(\"Choi's back number is :\", Choi.back_number)\nChoi.change_back_number(5)\nprint(\"Choi's back number now is :\", Choi.back_number)\n\nChoi.change_back_number(7)\nprint(\"Choi's back number now is :\", Choi.back_number)\nChoi.back_number = 20\nprint(\"Choi's back number is :\", Choi.back_number)\n\nprint()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AI BASICS 2.py b/AI BASICS 2.py
--- a/AI BASICS 2.py	(revision 44d2f5b90d94846e0c9c206ccf671c39496b19d6)
+++ b/AI BASICS 2.py	(date 1679295214943)
@@ -657,3 +657,4 @@
 print("Choi's back number is :", Choi.back_number)
 
 print()
+
